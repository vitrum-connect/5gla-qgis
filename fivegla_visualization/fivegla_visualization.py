# -*- coding: utf-8 -*-
"""
/***************************************************************************
 fivegla_visualization
                                 A QGIS plugin
 This plugin visualizes the measured values ​​and results of the 5GLa project.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by
        email                : ll@blue-sky-ops.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .fivegla_visualization_dialog import fivegla_visualizationDialog
import os.path
from .database_manager import DatabaseConnection
from .settings import FiveGLaVisualizationSettings

class fivegla_visualization:

    def __init__(self, iface):
        """Constructor."""
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'fivegla_visualization_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&5GLa Visualization')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('fivegla_visualization', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar."""

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.first_start = True

        icon_settings = ':/plugins/fivegla_visualization/icons/settings.png'
        settings_action_text = u'Settings'
        # will be set False after the first dialog was called

        fivegla_visualization_settings = FiveGLaVisualizationSettings(self.iface,self.firstStart)
        """Add Settings Action"""
        self.add_action(
            icon_settings,
            text=self.tr(settings_action_text),
            callback=lambda: fivegla_visualization_settings.run(),
            add_to_toolbar=False,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&5GLa Visualization'),
                action)
            self.iface.removeToolBarIcon(action)


    """This methode will ensure that all dependencys are setup before the first dialog is called"""
    def firstStart(self):
        if self.first_start:
            config_file = self.plugin_dir + "/database_manager/credentials.json"
            connection = DatabaseConnection(config_file)
            if not connection.connect():
                """No Database Connection"""
            self.first_start = False